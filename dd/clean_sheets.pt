import gspread
from oauth2client.service_account import ServiceAccountCredentials
import logging

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('clean_sheets.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Configure Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
client = gspread.authorize(creds)
spreadsheet = client.open_by_key('1GrLufeQeZMwP9vd3OYA2zhzh50FOiNFePWtP0PbCCXk')

def format_price(value):
    """Convert invalid or inflated price to correct format (e.g., '#ERROR!' or 2899.0 -> '28,99')."""
    if value in ('#ERROR!', ''):  # Handle error or empty values
        logger.warning(f"Pomijam nieprawidłową wartość: {value}")
        return None
    try:
        num = float(str(value).replace(',', '.'))
        if num > 1000:  # Assume inflation by 100
            num /= 100
        return f"{num:.2f}".replace('.', ',')
    except (ValueError, TypeError):
        logger.error(f"Nie można sformatować wartości: {value}, pomijam")
        return None

def clean_sheet(sheet_name, price_columns):
    """Clean invalid or inflated prices in a Google Sheet."""
    try:
        sheet = spreadsheet.worksheet(sheet_name)
        records = sheet.get_all_records()
        if not records:
            logger.info(f"Brak danych w arkuszu {sheet_name}")
            return

        headers = sheet.row_values(1)
        for i, record in enumerate(records, start=2):
            updates = []
            for col in price_columns:
                if col not in record:
                    logger.warning(f"Kolumna {col} nie znaleziona w rekordzie, pomijam")
                    continue
                old_value = str(record[col])
                new_value = format_price(old_value)
                if new_value and old_value != new_value:
                    logger.info(f"Poprawiam {col} w {sheet_name}, wiersz {i}: {old_value} -> {new_value}")
                    updates.append((col, new_value))
            if updates:
                for col, new_value in updates:
                    col_index = headers.index(col) + 1
                    sheet.update_cell(i, col_index, new_value)  # Write as plain string
        logger.info(f"Zakończono czyszczenie arkusza {sheet_name}")
    except Exception as e:
        logger.error(f"Błąd podczas czyszczenia arkusza {sheet_name}: {str(e)}")

def main():
    # Clean "CHEMIA" and "INNE" sheets
    for sheet_name in ["CHEMIA", "INNE"]:
        clean_sheet(sheet_name, ["Cena netto (za JM)", "Cena z VAT (za JM)"])
    
    # Clean "Faktury Niezapłacone" sheet
    clean_sheet("Faktury Niezapłacone", ["Kwota Całkowita (PLN)"])

if __name__ == "__main__":
    main()